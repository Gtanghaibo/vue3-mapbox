import t from"map-promisified";import{toRef as e,h as o}from"vue";import r from"@mapbox/mapbox-gl-draw";import"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css";var i={methods:{$_emitEvent(t,e={}){this.$emit(t,{map:this.map||this.root.map,mapBox:this.mapBox||this.root.mapBox,component:this,...e})},$_emitMapEvent(t,e={}){this.$_emitEvent(t.type,{mapBoxEvent:t,...e})}}},a={resize:{name:"resize"},webglcontextlost:{name:"webglcontextlost"},webglcontextrestored:{name:"webglcontextrestored"},remove:{name:"remove"},movestart:{name:"movestart"},load:{name:"load"},contextmenu:{name:"contextmenu"},dblclick:{name:"dblclick"},click:{name:"click"},touchcancel:{name:"touchcancel"},touchmove:{name:"touchmove"},touchend:{name:"touchend"},touchstart:{name:"touchstart"},dataloading:{name:"dataloading"},mousemove:{name:"mousemove"},mouseup:{name:"mouseup"},mousedown:{name:"mousedown"},sourcedataloading:{name:"sourcedataloading"},error:{name:"error"},data:{name:"data"},styledata:{name:"styledata"},sourcedata:{name:"sourcedata"},mouseout:{name:"mouseout"},styledataloading:{name:"styledataloading"},moveend:{name:"moveend"},move:{name:"move"},render:{name:"render"},zoom:{name:"zoom"},zoomstart:{name:"zoomstart"},zoomend:{name:"zoomend"},boxzoomstart:{name:"boxzoomstart"},boxzoomcancel:{name:"boxzoomcancel"},boxzoomend:{name:"boxzoomend"},rotate:{name:"rotate"},rotatestart:{name:"rotatestart"},rotateend:{name:"rotateend"},dragend:{name:"dragend"},drag:{name:"drag"},dragstart:{name:"dragstart"},pitch:{name:"pitch"},idle:{name:"idle"}},s={container:{type:[String,HTMLElement],default:()=>`map-${(""+Math.random()).split(".")[1]}`},accessToken:{type:String,default:void 0},minZoom:{type:Number,default:0},maxZoom:{type:Number,default:22},mapStyle:{type:[String,Object],required:!0},hash:{type:[Boolean,String],default:!1},interactive:{type:Boolean,default:!0},bearingSnap:{type:Number,default:7},pitchWithRotate:{type:Boolean,default:!0},clickTolerance:{type:Number,default:3},attributionControl:{type:Boolean,default:!0},customAttribution:{type:[String,Array],default:null},logoPosition:{type:String,default:"bottom-left",validator:t=>["top-left","top-right","bottom-left","bottom-right"].includes(t)},failIfMajorPerformanceCaveat:{type:Boolean,default:!1},preserveDrawingBuffer:{type:Boolean,default:!1},refreshExpiredTiles:{type:Boolean,default:!0},maxBounds:{type:Array,default(){}},scrollZoom:{type:[Boolean,Object],default:()=>!0},boxZoom:{type:Boolean,default:!0},dragRotate:{type:Boolean,default:!0},dragPan:{type:Boolean,default:!0},keyboard:{type:Boolean,default:!0},doubleClickZoom:{type:Boolean,default:!0},touchZoomRotate:{type:[Boolean,Object],default:()=>!0},trackResize:{type:Boolean,default:!0},center:{type:[Object,Array],default:void 0},zoom:{type:Number,default:0},zoomend:{type:Number,default:0},bearing:{type:Number,default:0},pitch:{type:Number,default:0},bounds:{type:[Object,Array],default:void 0},fitBoundsOptions:{type:Object,default:void 0},renderWorldCopies:{type:Boolean,default:!0},RTLTextPluginUrl:{type:String,default:void 0},light:{type:Object,default:void 0},tileBoundaries:{type:Boolean,default:!1},collisionBoxes:{type:Boolean,default:!1},repaint:{type:Boolean,default:!1},transformRequest:{type:Function,default:null},maxTileCacheSize:{type:Number,default:null},localIdeographFontFamily:{type:String,default:null},collectResourceTiming:{type:Boolean,default:!1},fadeDuration:{type:Number,default:300},crossSourceCollisions:{type:Boolean,default:!0}};const n={maxBounds(t){this.map.setMaxBounds(t)},minZoom(t){this.map.setMinZoom(t)},maxZoom(t){this.map.setMaxZoom(t)},mapStyle(t){this.map.setStyle(t)},collisionBoxes(t){this.map.showCollisionBoxes=t},tileBoundaries(t){this.map.showTileBoundaries=t},repaint(t){this.map.repaint=t},zoom(t){this.map.setZoom(t)},center(t,e){this.map.setCenter(t)},bearing(t){this.map.setBearing(t)},pitch(t){this.map.setPitch(t)},light(t){this.map.setLigh(t)}};function d(t,e,o,r){this.initial||(this.propsIsUpdating[t]?this.propsIsUpdating[t]=!1:e(o,r))}var h={name:"GlMap",inheritAttrs:!1,mixins:[{watch:function(){const t={};return Object.entries(n).forEach((e=>{t[e[0]]=function(t,o){return d.call(this,e[0],e[1].bind(this),t,o)}})),t}()},{created(){this.actions={}},methods:{$_registerAsyncActions(e){this.actions={...t(e),stop(){(this.map||this.root.map).stop();const t={pitch:(this.map||this.root.map).getPitch(),zoom:(this.map||this.root.map).getZoom(),bearing:(this.map||this.root.map).getBearing(),center:(this.map||this.root.map).getCenter()};return Object.entries(t).forEach((t=>{this.$_updateSyncedPropsFabric(t[0],t[1])()})),Promise.resolve(t)}}}}},{methods:{$_updateSyncedPropsFabric(t,e){return()=>{this.propsIsUpdating[t]=!0;let o="function"==typeof e?e():e;return this.$emit(`update:${t}`,o)}},$_bindPropsUpdateEvents(){[{events:["moveend"],prop:"center",getter:this.map.getCenter.bind(this.map)},{events:["zoomend"],prop:"zoomend",getter:this.map.getZoom.bind(this.map)},{events:["zoom"],prop:"zoom",getter:this.map.getZoom.bind(this.map)},{events:["rotate"],prop:"bearing",getter:this.map.getBearing.bind(this.map)},{events:["pitch"],prop:"pitch",getter:this.map.getPitch.bind(this.map)},{events:["moveend","zoomend","rotate","pitch"],prop:"bounds",getter:()=>{let t=this.map.getBounds();return this.$props.bounds instanceof Array&&(t=t.toArray()),t}}].forEach((({events:t,prop:e,getter:o})=>{t.forEach((t=>{(this.$attrs[`onUpdate:${e}`]||e in this.$props)&&this.map.on(t,this.$_updateSyncedPropsFabric(e,o))}))}))},$_loadMap(){return this.mapBoxPromise.then((t=>(this.mapBox=t.default?t.default:t,new Promise((e=>{this.accessToken&&(this.mapBox.accessToken=this.accessToken);const o=new this.mapBox.Map({...this.$props,container:this.$refs.container,style:this.mapStyle});o.on("load",(()=>e({map:o,mapBox:t})))})))))},$_RTLTextPluginError(t){this.$emit("rtl-plugin-error",{map:this.map,error:t})},$_filterPropsEvents(){let t=Object.keys(this.$attrs).filter((t=>t.indexOf("on")>-1));return t=t.map((t=>t.slice(2).toLowerCase())),t},$_bindMapEvents(t){this.$_filterPropsEvents().forEach((e=>{t.includes(e)&&this.map.on(e,this.$_emitMapEvent)}))},$_unbindEvents(t){t.forEach((t=>{this.map.off(t,this.$_emitMapEvent)}))}}},i],props:{mapboxGl:{type:Object,default:null},...s},provide(){return{get mapbox(){return null},get map(){return null},get actions(){return null},initialized:e(this,"initialized"),root:this}},emits:["update:center","update:bounds","update:zoom","update:zoomend"],data:()=>({initial:!0,initialized:!1,propsIsUpdating:{}}),computed:{loaded(){return!!this.map&&this.map.loaded()},version(){return this.map?this.map.version:null},isStyleLoaded(){return!!this.map&&this.map.isStyleLoaded()},areTilesLoaded(){return!!this.map&&this.map.areTilesLoaded()},isMoving(){return!!this.map&&this.map.isMoving()},canvas(){return this.map?this.map.getCanvas():null},canvasContainer(){return this.map?this.map.getCanvasContainer():null},images(){return this.map?this.map.listImages():null}},created(){this.map=null,this.propsIsUpdating={},this.$_containerVNode=null,this.mapBoxPromise=this.mapboxGl?Promise.resolve(this.mapboxGl):import("mapbox-gl")},mounted(){this.$_loadMap().then((({map:t,mapBox:e})=>{this.map=t,void 0!==this.RTLTextPluginUrl&&"loaded"!==this.mapBox.getRTLTextPluginStatus()&&this.mapBox.setRTLTextPlugin(this.RTLTextPluginUrl,this.$_RTLTextPluginError);const o=Object.keys(a);this.$_bindMapEvents(o),this.$_registerAsyncActions(t),this.$_bindPropsUpdateEvents(),this.initial=!1,this.initialized=!0,this.$emit("load",{map:t,mapBox:e,component:this})}))},beforeUnmount(){this.$nextTick((()=>{this.map&&this.map.remove()}))},render(){return o("div",{class:"mgl-map-wrapper"},[o("div",{id:this.container,ref:"container"}),this.initialized&&this.$slots.default?this.$slots.default():null])}},l={methods:{$_emitSelfEvent(t,e={}){this.$_emitMapEvent(t,{control:this.control,...e})},$_filterPropsEvents(){let t=Object.keys(this.$attrs).filter((t=>t.indexOf("on")>-1));return t=t.map((t=>t.slice(2).toLowerCase())),t},$_bindSelfEvents(t,e){this.$_filterPropsEvents().forEach((o=>{t.includes(o)&&e.on(o,this.$_emitSelfEvent)}))},$_unbindSelfEvents(t,e){0!==t.length&&e&&t.forEach((t=>{e.off(t,this.$_emitSelfEvent)}))}}},p={mixins:[i,l],inject:["mapbox","map","actions","root"],props:{position:{type:String,default:"top-right"}},beforeUnmount(){this.map&&this.control&&this.root.map.removeControl(this.control)},methods:{$_addControl(){try{this.root.map.addControl(this.control,this.position)}catch(t){return void this.$_emitEvent("error",{error:t})}this.$_emitEvent("added",{control:this.control,drawType:this.drawType||""})}},render(){}},m={name:"NavigationControl",mixins:[p],props:{showCompass:{type:Boolean,default:!0},showZoom:{type:Boolean,default:!0}},created(){this.control=new this.root.mapBox.NavigationControl(this.$props),this.$_addControl()}};const u={trackuserlocationstart:"trackuserlocationstart",trackuserlocationend:"trackuserlocationend",geolocate:"geolocate",error:"error"};var c={name:"GeolocateControl",mixins:[i,l,p],props:{positionOptions:{type:Object,default:()=>({enableHighAccuracy:!1,timeout:6e3})},fitBoundsOptions:{type:Object,default:()=>({maxZoom:15})},trackUserLocation:{type:Boolean,default:!1},showUserLocation:{type:Boolean,default:!0}},created(){const t=this.root.mapBox.GeolocateControl;this.control=new t(this.$props),this.$_addControl(),this.$_bindSelfEvents(Object.keys(u),this.control)},methods:{trigger(){if(this.control)return this.control.trigger()}}},y={name:"FullscreenControl",mixins:[p],props:{container:{type:HTMLElement,default:void 0}},created(){this.control=new this.root.mapBox.FullscreenControl(this.$props),this.$_addControl()}},f={name:"AttributionControl",mixins:[p],props:{compact:{type:Boolean,default:!0},customAttribution:{type:[String,Array],deafault:void 0}},created(){this.control=new this.root.mapBox.AttributionControl(this.$props),this.$_addControl()}},g={name:"DrawControl",mixins:[p],props:{modes:{type:Object,default:null},drawType:{type:String,default:"draw_polygon"}},beforeUnmount(){this.control.onRemove()},created(){let t=Object.assign({},this.$props);this.modes||delete t.modes,delete t.drawType,this.control=new r(t),this.$_addControl()}};const v={drag:"drag",dragstart:"dragstart",dragend:"dragend"},$={click:"click",mouseenter:"mouseenter",mouseleave:"mouseleave"};var b={name:"MapMarker",mixins:[i,l],inject:["mapbox","map","root"],provide(){const t=this;return{get marker(){return t.marker}}},props:{offset:{type:[Object,Array],default:()=>[0,0]},coordinates:{type:Array,required:!0},color:{type:String},anchor:{type:String,default:"center"},draggable:{type:Boolean,default:!1},rotation:{type:[String,Number],default:0},scale:{type:Number,default:0}},data:()=>({initial:!0,marker:void 0}),watch:{coordinates(t){this.initial||this.marker.setLngLat(t)},draggable(t){this.initial||this.marker.setDraggable(t)},rotation(t){this.marker.setRotation(t)}},mounted(){const t={...this.$props},e=this.$slots.marker()[0];this.$nextTick((()=>{console.log(this.markerVnode),this.$slots.marker&&(console.log(this.$slots.marker,this.$slots.marker(),e,this.$el.children[0]),t.element=this.$el.children[0]),this.marker=new this.root.mapBox.Marker(t),this.$attrs["onUpdate:coordinates"]&&this.marker.on("dragend",(t=>{let e;e=this.coordinates instanceof Array?[t.target._lngLat.lng,t.target._lngLat.lat]:t.target._lngLat,this.$emit("update:coordinates",e)}));const o=Object.keys(v);this.$_bindSelfEvents(o,this.marker),this.initial=!1,this.$_addMarker()}))},beforeUnmount(){void 0!==this.map&&void 0!==this.marker&&this.marker.remove()},methods:{$_addMarker(){this.marker.setLngLat(this.coordinates).setRotation(this.rotation).addTo(this.root.map),this.$_bindMarkerDOMEvents(),this.$_emitEvent("added",{marker:this.marker})},$_emitSelfEvent(t){this.$_emitMapEvent(t,{marker:this.marker})},$_filterPropsEvents(){let t=Object.keys(this.$attrs).filter((t=>t.indexOf("on")>-1));return t=t.map((t=>t.slice(2).toLowerCase())),t},$_bindMarkerDOMEvents(){this.$_filterPropsEvents().forEach((t=>{Object.values($).includes(t)&&this.marker._element.addEventListener(t,(t=>{this.$_emitSelfEvent(t)}))}))},remove(){this.marker.remove(),this.$_emitEvent("removed")},togglePopup(){return this.marker.togglePopup()}},render(){return o("div",{style:{display:"none"}},[this.$slots.marker?this.$slots.marker():null,this.marker&&this.$slots.default?this.$slots.default():null])}};const _={open:"open",close:"close"};var I={name:"Popup",mixins:[i,l],inject:{mapbox:{default:null},map:{default:null},marker:{default:null},root:{default:null}},props:{closeButton:{type:Boolean,default:!0},closeOnClick:{type:Boolean,default:!0},anchor:{validator:t=>"string"==typeof t&&["top","bottom","left","right","top-left","top-right","bottom-left","bottom-right"].includes(t),default:void 0},offset:{type:[Number,Object,Array],default:()=>[0,0]},coordinates:{type:Array},onlyText:{type:Boolean,default:!1},showed:{type:Boolean,default:!1}},data:()=>({initial:!0,popup:void 0}),computed:{open:{get(){return void 0!==this.popup&&this.popup.isOpen()},set(t){this.map&&this.popup&&(t?this.popup.addTo(this.map):this.popup.remove())}}},watch:{coordinates(t){this.initial||this.popup.setLngLat(t)},showed(t,e){t!==e&&(this.open=t,this.marker&&this.marker.togglePopup())}},created(){this.popup=new this.root.mapBox.Popup(this.$props)},mounted(){this.$_addPopup(),this.initial=!1},beforeUnmount(){this.map&&(this.popup.remove(),this.$_emitEvent("removed"))},methods:{$_addPopup(){if(this.popup=new this.root.mapBox.Popup(this.$props),void 0!==this.coordinates&&this.popup.setLngLat(this.coordinates),void 0!==this.$slots.default)if(this.onlyText)if(3===this.$slots.default()[0].el.nodeType){let t=document.createElement("span");t.appendChild(this.$slots.default()[0].el),this.popup.setText(t.innerText)}else this.popup.setText(this.$slots.default()[0].el.innerText);else this.popup.setDOMContent(this.$slots.default()[0].el);this.$_bindSelfEvents(Object.keys(_),this.popup),this.$_emitEvent("added",{popup:this.popup}),this.marker&&this.marker.setPopup(this.popup),this.showed&&(this.open=!0,this.marker&&this.marker.togglePopup())},$_emitSelfEvent(t){this.$_emitMapEvent(t,{popup:this.popup})},remove(){this.popup.remove(),this.$_emitEvent("remove",{popup:this.popup})}},render(){return o("div",{style:{display:"none"}},[this.$slots.default?this.$slots.default():null])}},S=["mousedown","mouseup","click","dblclick","mousemove","mouseenter","mouseleave","mouseover","mouseout","contextmenu","touchstart","touchend","touchcancel"];var x={mixins:[i],props:{...{sourceId:{type:String,required:!0},source:{type:[Object,String],default:void 0}},...{layerId:{type:String,required:!0},layer:{type:Object,required:!0},before:{type:String,default:void 0}},...{clearSource:{type:Boolean,default:!0},replaceSource:{type:Boolean,default:!1},replace:{type:Boolean,default:!1}}},inject:["mapbox","map","root"],data:()=>({initial:!0}),computed:{sourceLoaded(){return!!this.root.map&&this.root.map.isSourceLoaded(this.sourceId)},mapLayer(){return this.root.map?this.root.map.getLayer(this.layerId):null},mapSource(){return this.root.map?this.root.map.getSource(this.sourceId):null}},created(){this.layer.minzoom&&this.$watch("layer.minzoom",(function(t){this.initial||this.root.map.setLayerZoomRange(this.layerId,t,this.layer.maxzoom)})),this.layer.maxzoom&&this.$watch("layer.maxzoom",(function(t){this.initial||this.root.map.setLayerZoomRange(this.layerId,this.layer.minzoom,t)})),this.layer.paint&&this.$watch("layer.paint",(function(t){if(!this.initial&&t)for(let e of Object.keys(t))this.root.map.setPaintProperty(this.layerId,e,t[e])}),{deep:!0}),console.log("layer",this.layer),this.layer.layout&&this.$watch("layer.layout",(function(t){if(!this.initial&&t)for(let e of Object.keys(t))this.root.map.setLayoutProperty(this.layerId,e,t[e])}),{deep:!0}),this.layer.filter&&this.$watch("layer.filter",(function(t){this.initial||this.root.map.setFilter(this.layerId,t)}),{deep:!0})},beforeUnmount(){if(this.map&&this.root.map.loaded()){try{this.root.map.removeLayer(this.layerId)}catch(t){this.$_emitEvent("layer-does-not-exist",{layerId:this.sourceId,error:t})}if(this.clearSource)try{this.root.map.removeSource(this.sourceId)}catch(t){this.$_emitEvent("source-does-not-exist",{sourceId:this.sourceId,error:t})}}},methods:{$_emitLayerMapEvent(t){return console.log(t),this.$_emitMapEvent(t,{layerId:this.layerId})},$_filterPropsEvents(){let t=Object.keys(this.$attrs).filter((t=>t.indexOf("on")>-1));return t=t.map((t=>t.slice(2).toLowerCase())),t},$_bindLayerEvents(t){this.$_filterPropsEvents().forEach((e=>{t.includes(e)&&this.root.map.on(e,this.layerId,this.$_emitLayerMapEvent)}))},$_unbindEvents(t){this.map&&t.forEach((t=>{this.root.map.off(t,this.layerId,this.$_emitLayerMapEvent)}))},$_watchSourceLoading(t){"source"===t.dataType&&t.sourceId===this.sourceId&&(this.$_emitEvent("layer-source-loading",{sourceId:this.sourceId}),this.root.map.off("dataloading",this.$_watchSourceLoading))},move(t){this.root.map.moveLayer(this.layerId,t),this.$_emitEvent("layer-moved",{layerId:this.layerId,beforeId:t})},remove(){this.root.map.removeLayer(this.layerId),this.root.map.removeSource(this.sourceId),this.$_emitEvent("layer-removed",{layerId:this.layerId}),this.$destroy()}},render(){}};const L=i,E=l,w=p,k=x,B={withEvents:i,withSelfEvents:l,asControl:p,asLayer:x},C=h,M=m,P=c,O=y,T=f,j={name:"ScaleControl",mixins:[p],props:{maxWidth:{type:Number,default:150},unit:{type:String,default:"metric",validator:t=>["imperial","metric","nautical"].includes(t)}},watch:{unit(t,e){this.control&&t!==e&&this.control.setUnit(t)}},created(){this.control=new this.root.mapBox.ScaleControl(this.$props),this.$_addControl()}},z=g,F={name:"GeojsonLayer",mixins:[x],computed:{getSourceFeatures(){return t=>this.root.map?this.root.map.querySourceFeatures(this.sourceId,{filter:t}):null},getRenderedFeatures(){return(t,e)=>this.root.map?this.root.map.queryRenderedFeatures(t,{layers:[this.layerId],filter:e}):null},getClusterExpansionZoom(){return t=>new Promise(((e,o)=>{if(!this.mapSource)return o(new Error(`Map source with id ${this.sourceId} not found.`));this.mapSource.getClusterExpansionZoom(t,((t,r)=>t?o(t):e(r)))}))},getClusterChildren(){return t=>new Promise(((e,o)=>{const r=this.mapSource;if(!r)return o(new Error(`Map source with id ${this.sourceId} not found.`));r.getClusterChildren(t,((t,r)=>t?o(t):e(r)))}))},getClusterLeaves(){return(...t)=>new Promise(((e,o)=>{if(!this.mapSource)return o(new Error(`Map source with id ${this.sourceId} not found.`));this.mapSource.getClusterLeaves(...t,((t,r)=>t?o(t):e(r)))}))}},created(){this.source&&(this.$watch("source.data",(function(t){this.initial||this.mapSource.setData(t)}),{deep:!0}),this.$watch("layer.layout",(t=>{console.log("visibility",t)}),{deep:!0})),this.$_deferredMount(),setInterval((()=>{}),1e3)},render(){return o("div",[o("div",[this.layer.layout.visibility])])},methods:{$_deferredMount(){if(this.root.map.on("dataloading",this.$_watchSourceLoading),this.source){const t={type:"geojson",...this.source};try{this.root.map.addSource(this.sourceId,t)}catch(e){this.replaceSource&&(this.root.map.removeSource(this.sourceId),this.root.map.addSource(this.sourceId,t))}}this.$_addLayer(),this.$_bindLayerEvents(S),this.root.map.off("dataloading",this.$_watchSourceLoading),this.initial=!1},$_addLayer(){let t=this.root.map.getLayer(this.layerId);if(t){if(!this.replace)return this.$_emitEvent("layer-exists",{layerId:this.layerId}),t;this.root.map.removeLayer(this.layerId)}const e={id:this.layerId,source:this.sourceId,...this.layer};this.root.map.addLayer(e,this.before),this.$_emitEvent("added",{layerId:this.layerId})},setFeatureState(t,e){if(this.root.map){const o={id:t,source:this.source};return this.root.map.setFeatureState(o,e)}},getFeatureState(t){if(this.root.map){const e={id:t,source:this.source};return this.root.map.getFeatureState(e)}},removeFeatureState(t,e,o){if(this.root.map){const r={id:t,source:this.source,sourceLayer:e};return this.root.map.removeFeatureState(r,o)}}}},R={name:"ImageLayer",mixins:[x],created(){this.source&&(this.source.coordinates&&this.$watch("source.coordinates",(function(t){this.initial||t&&this.mapSource.setCoordinates(t)}),{deep:!0}),this.source.url&&this.$watch("source.url",(function(t){this.initial||t&&this.mapSource.updateImage({url:t,coordinates:this.source.coordinates})}),{deep:!0})),this.$_deferredMount()},methods:{$_deferredMount(){const t={type:"image",...this.source};this.root.map.on("dataloading",this.$_watchSourceLoading);try{this.root.map.addSource(this.sourceId,t)}catch(e){this.replaceSource&&(this.root.map.removeSource(this.sourceId),this.root.map.addSource(this.sourceId,t))}this.$_addLayer(),this.$_bindLayerEvents(S),this.initial=!1},$_addLayer(){let t=this.root.map.getLayer(this.layerId);if(t){if(!this.replace)return this.$_emitEvent("layer-exists",{layerId:this.layerId}),t;this.root.map.removeLayer(this.layerId)}const e={id:this.layerId,source:this.sourceId,type:"raster",...this.layer};this.root.map.addLayer(e,this.before),this.$_emitEvent("added",{layerId:this.layerId})}}},A={name:"CanvasLayer",mixins:[x],inject:["mapbox","map","root"],props:{source:{type:Object,required:!0},layer:{type:Object,default:null}},computed:{canvasElement(){return this.mapSource?this.mapSource.getCanvas():null}},watch:{coordinates(t){this.initial||this.mapSource.setCoordinates(t)}},created(){this.$_deferredMount()},methods:{$_deferredMount(){const t={type:"canvas",...this.source};this.root.map.on("dataloading",this.$_watchSourceLoading);try{this.root.map.addSource(this.sourceId,t)}catch(e){this.replaceSource&&(this.root.map.removeSource(this.sourceId),this.root.map.addSource(this.sourceId,t))}this.$_addLayer(),this.$_bindLayerEvents(S),this.initial=!1},$_addLayer(){let t=this.root.map.getLayer(this.layerId);if(t){if(!this.replace)return this.$_emitEvent("layer-exists",{layerId:this.layerId}),t;this.root.map.removeLayer(this.layerId)}let e={id:this.layerId,source:this.sourceId,type:"raster",...this.layer};this.root.map.addLayer(e,this.before),this.$_emitEvent("added",{layerId:this.layerId,canvas:this.canvasElement})}}},U={name:"VideoLayer",mixins:[x],computed:{video(){return this.root.map.getSource(this.sourceId).getVideo()}},created(){this.source&&this.source.coordinates&&this.$watch("source.coordinates",(function(t){this.initial||this.mapSource.setCoordinates(t)})),this.$_deferredMount()},methods:{$_deferredMount(){const t={type:"video",...this.source};this.root.map.on("dataloading",this.$_watchSourceLoading);try{this.root.map.addSource(this.sourceId,t)}catch(e){this.replaceSource&&(this.root.map.removeSource(this.sourceId),this.root.map.addSource(this.sourceId,t))}this.$_addLayer(),this.$_bindLayerEvents(S),this.initial=!1},$_addLayer(){let t=this.root.map.getLayer(this.layerId);if(t){if(!this.replace)return this.$_emitEvent("layer-exists",{layerId:this.layerId}),t;this.root.map.removeLayer(this.layerId)}let e={id:this.layerId,source:this.sourceId,type:"background",...this.layer};this.root.map.addLayer(e,this.before),this.$_emitEvent("added",{layerId:this.layerId})}}},Z={name:"VectorLayer",mixins:[x],computed:{getSourceFeatures(){return t=>this.map?this.root.map.querySourceFeatures(this.sourceId,{sourceLayer:this.layer["source-layer"],filter:t}):null},getRenderedFeatures(){return(t,e)=>this.map?this.root.map.queryRenderedFeatures(t,{layers:[this.layerId],filter:e}):null}},watch:{filter(t){this.initial||this.root.map.setFilter(this.layerId,t)}},created(){this.$_deferredMount()},methods:{$_deferredMount(){let t={type:"vector",...this.source};this.root.map.on("dataloading",this.$_watchSourceLoading);try{this.root.map.addSource(this.sourceId,t)}catch(e){this.replaceSource&&(this.root.map.removeSource(this.sourceId),this.root.map.addSource(this.sourceId,t))}this.$_addLayer(),this.$_bindLayerEvents(S),this.root.map.off("dataloading",this.$_watchSourceLoading),this.initial=!1},$_addLayer(){let t=this.root.map.getLayer(this.layerId);if(t){if(!this.replace)return this.$_emitEvent("layer-exists",{layerId:this.layerId}),t;this.root.map.removeLayer(this.layerId)}let e={id:this.layerId,source:this.sourceId,...this.layer};this.root.map.addLayer(e,this.before),this.$_emitEvent("added",{layerId:this.layerId})},setFeatureState(t,e){if(this.map){const o={id:t,source:this.sourceId,"source-layer":this.layer["source-layer"]};return this.root.map.setFeatureState(o,e)}},getFeatureState(t){if(this.map){const e={id:t,source:this.source,"source-layer":this.layer["source-layer"]};return this.root.map.getFeatureState(e)}}}},N={name:"RasterLayer",mixins:[x],created(){this.$_deferredMount()},methods:{$_deferredMount(){let t={type:"raster",...this.source};this.root.map.on("dataloading",this.$_watchSourceLoading);try{this.root.map.addSource(this.sourceId,t)}catch(e){this.replaceSource&&(this.root.map.removeSource(this.sourceId),this.root.map.addSource(this.sourceId,t))}this.$_addLayer(),this.$_bindLayerEvents(S),this.root.map.off("dataloading",this.$_watchSourceLoading),this.initial=!1},$_addLayer(){let t=this.root.map.getLayer(this.layerId);if(t){if(!this.replace)return this.$_emitEvent("layer-exists",{layerId:this.layerId}),t;this.root.map.removeLayer(this.layerId)}let e={id:this.layerId,type:"raster",source:this.sourceId,...this.layer};this.root.map.addLayer(e,this.before),this.$_emitEvent("added",{layerId:this.layerId})}}},q=b,D=I;export{B as $helpers,T as MglAttributionControl,A as MglCanvasLayer,z as MglDrawControl,O as MglFullscreenControl,F as MglGeojsonLayer,P as MglGeolocateControl,R as MglImageLayer,C as MglMap,q as MglMarker,M as MglNavigationControl,D as MglPopup,N as MglRasterLayer,j as MglScaleControl,Z as MglVectorLayer,U as MglVideoLayer,w as asControl,k as asLayer,L as withEvents,E as withSelfEvents};
